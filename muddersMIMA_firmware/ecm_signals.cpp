//Copyright 2022-2023(c) John Sullivan


//debug stuff

#include "muddersMIMA.h"

uint8_t state_MAMODE1 = MAMODE1_STATE_IS_UNDEFINED;
bool    state_MAMODE2 = MAMODE2_STATE_IS_REGEN_STANDBY;
uint8_t percent_CMDPWR = 50; 

/////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ecm_getMAMODE1_state(void)  { return state_MAMODE1;  }
bool    ecm_getMAMODE2_state(void)  { return state_MAMODE2;  }
uint8_t ecm_getCMDPWR_percent(void) { return percent_CMDPWR; }

/////////////////////////////////////////////////////////////////////////////////////////////

void determinePercent_CMDPWR(void) { percent_CMDPWR = adc_getCMDPWR_percent(); }

/////////////////////////////////////////////////////////////////////////////////////////////

//open drain signal generated by ECM
void determineState_MAMODE2(void)
{
	if(gpio_getMAMODE2_bool() == true) { state_MAMODE2 = MAMODE2_STATE_IS_REGEN_STANDBY; }
	else                               { state_MAMODE2 = MAMODE2_STATE_IS_ASSIST;        }
}

/////////////////////////////////////////////////////////////////////////////////////////////

void determineState_MAMODE1(void)
{
	uint8_t percent = adc_getMAMODE1_percent();

	if     (percent <   10) { state_MAMODE1 = MAMODE1_STATE_IS_ERROR_LO;  } // 0: 10%
	else if(percent <=  20) { state_MAMODE1 = MAMODE1_STATE_IS_PRESTART;  } //10: 20%
	else if(percent <=  30) { state_MAMODE1 = MAMODE1_STATE_IS_ASSIST;    } //20: 30%
	else if(percent <=  40) { state_MAMODE1 = MAMODE1_STATE_IS_REGEN;     } //30: 40% 
	else if(percent <=  60) { state_MAMODE1 = MAMODE1_STATE_IS_IDLE;      } //40: 60%
	else if(percent <=  75) { state_MAMODE1 = MAMODE1_STATE_IS_AUTOSTOP;  } //60: 75%
	else if(percent <=  90) { state_MAMODE1 = MAMODE1_STATE_IS_START;     } //75: 90%
	else if(percent <= 100) { state_MAMODE1 = MAMODE1_STATE_IS_ERROR_HI;  } //90:100%
	else                    { state_MAMODE1 = MAMODE1_STATE_IS_UNDEFINED; } // above 100%
}

/////////////////////////////////////////////////////////////////////////////////////////////

void ecm_handler()
{
	determineState_MAMODE1();
	determineState_MAMODE2();
	determinePercent_CMDPWR();
}